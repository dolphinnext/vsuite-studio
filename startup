#!/bin/bash

# start mongodb
mkdir -p /export/mongodb
mongod --fork --logpath /var/log/mongodb.log --dbpath /export/mongodb --bind_ip_all
mongo < /usr/local/bin/mongoinit.js 1> /dev/null
mongo admin --eval "if (db.getUser('docker') == null) { db.getSiblingDB('admin').createUser({user: 'docker', pwd: 'docker', roles: [ 'root']})}"
mongo admin -u docker -p docker --eval 'db.grantRolesToUser ( "docker", [ { role: "__system", db: "admin" } ] )' --authenticationDatabase admin
mongod --shutdown --logpath /var/log/mongodb.log --dbpath /export/mongodb --bind_ip_all 
mongod --fork --logpath /var/log/mongodb.log --dbpath /export/mongodb --bind_ip_all --auth

# dmeta dportal dsso
if [ ! -d "/export/dsso" -a ! -L "/export/dsso" ]; then
   git clone https://github.com/UMMS-Biocore/dsso.git /export/dsso && npm install -C /export/dsso && npm audit fix -C /export/dsso && ln -s /export/dsso /var/www/html/.
else 
   rm -rf /var/www/html/dsso && ln -s /export/dsso /var/www/html/.
fi

if [ ! -d /export/vmeta ]; then
   git clone https://github.com/UMMS-Biocore/vmeta.git /export/vmeta && npm install -C /export/vmeta && npm audit fix -C /export/vmeta && ln -s /export/vmeta /var/www/html/.
else 
   rm -rf /var/www/html/vmeta && ln -s /export/vmeta /var/www/html/.
fi

if [ ! -d /export/vportal ]; then
   git clone https://github.com/UMMS-Biocore/dportal.git /export/dportal && npm install -C /export/dportal && npm audit fix -C /export/dportal && ln -s /export/dportal /var/www/html/.
else 
   rm -rf /var/www/html/vportal && ln -s /export/vportal /var/www/html/.
fi

if [ ! -d /export/vfoundry ]; then
   git clone https://github.com/ViaScientific/vfoundry.git /export/vfoundry && npm install -C /export/vfoundry && npm audit fix -C /export/vfoundry && ln -s /export/vfoundry /var/www/html/.
else
   rm -rf /var/www/html/vfoundry && ln -s /export/vfoundry /var/www/html/.
fi

if [ ! -d /export/vpipe ]; then
   git clone https://github.com/ViaScientific/vpipe.git /export/vpipe &&  ln -s /export/vpipe /var/www/html/.
else
   rm -rf /var/www/html/vpipe && ln -s /export/vpipe /var/www/html/.
fi

if [ ! -f /var/www/html/dmeta/config.env ]; then
   cp /var/www/html/dmeta/docs/templates/template.config.env /var/www/html/dmeta/config.env
fi
if [ ! -f /var/www/html/vportal/config.env ]; then
   cp /var/www/html/vportal/docs/template.config.env /var/www/html/vportal/config.env
fi
if [ ! -f /var/www/html/dsso/config.env ]; then
   cp /var/www/html/dsso/docs/template.config.env /var/www/html/dsso/config.env
fi
if [ ! -f /var/www/html/vfoundry/config.env ]; then
   cp /var/www/html/vfoundry/docs/template.config.env /var/www/html/vfoundry/config.env
fi

# certificates
if [ ! -f /var/www/html/dmeta/certs/privatekey.pem ]; then
   export CAROOT="/var/www/html/dmeta/certs/" && \
   mkcert -install && \
   mkcert -cert-file /var/www/html/dmeta/certs/certificate.pem -key-file /var/www/html/dmeta/certs/privatekey.pem localhost
fi
if [ ! -f /var/www/html/dsso/certs/privatekey.pem ]; then
   export CAROOT="/var/www/html/dsso/certs/" && \
   mkcert -install && \
   mkcert -cert-file /var/www/html/dsso/certs/certificate.pem -key-file /var/www/html/dsso/certs/privatekey.pem localhost
fi
if [ ! -f /var/www/html/vportal/certs/privatekey.pem ]; then
   export CAROOT="/var/www/html/vportal/certs/" && \
   mkcert -install && \
   mkcert -cert-file /var/www/html/vportal/certs/certificate.pem -key-file /var/www/html/vportal/certs/privatekey.pem localhost
fi

mongo -u "docker" -p "docker" --authenticationDatabase "admin" --eval "if (db.getUser('docker') == null) { db.getSiblingDB('dsso').createUser({user: 'docker', pwd: 'docker', roles: [ 'dbOwner' ]})}"
mongo -u "docker" -p "docker" --authenticationDatabase "admin" --eval "if (db.getUser('docker') == null) { db.getSiblingDB('vmeta').createUser({user: 'docker', pwd: 'docker', roles: [ 'dbOwner' ]})}"
mongo -u "docker" -p "docker" --authenticationDatabase "admin" --eval "if (db.getUser('docker') == null) { db.getSiblingDB('vportal').createUser({user: 'docker', pwd: 'docker', roles: [ 'dbOwner' ]})}"
mongo -u "docker" -p "docker" --authenticationDatabase "admin" --eval "if (db.getUser('docker') == null) { db.getSiblingDB('vfoundry').createUser({user: 'docker', pwd: 'docker', roles: [ 'dbOwner' ]})}"



# Start DMETA DPORTAL DSSO with pm2
cd /var/www/html/vmeta && pm2 restart pm2-process.json
cd /var/www/html/vportal &&  pm2 restart pm2-process.json
cd /var/www/html/dsso && pm2 restart pm2-process.json
cd /var/www/html/vfoundry && pm2 restart pm2-process.json

### APACHE SERVER
source /etc/apache2/envvars
# If /export/ is mounted, export_user_files file moving all data to /export/
# symlinks will point from the original location to the new path under /export/
# If /export/ is not given, nothing will happen in that step
python /usr/local/bin/export_user_files.py 

mkdir -p /export/.dolphinnext/.ssh
chown -R ${APACHE_RUN_USER}:${APACHE_RUN_GROUP} /export/.dolphinnext

   echo -e "$(hostname -i)    $(hostname).localdomain   $(hostname)" >> /etc/hosts
if [ ! -f /var/www/html/dolphinnext/config/.sec ]; then
   mv /usr/local/bin/.sec /var/www/html/dolphinnext/config/.sec
fi

/usr/local/bin/user_add.sh

find /var/lib/mysql -type f -exec touch {} \; && sudo service mysql start 
#Start ssh
service ssh start
#Sendmail service start
/etc/init.d/sendmail restart 

# start Apache in Foreground, that is needed for Docker
apache2 -D FOREGROUND & 

#start cron service
crontab /usr/local/bin/dolphinnext-cron
service cron start 

#timezone update
TZ=$(grep "TIMEZONE=" /export/dolphinnext/config/.sec |   awk -F "=" '{print $2}')
ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
DIFF=$(date +%:z)
mysql -u root  --execute="SET GLOBAL time_zone = '${DIFF}';"
